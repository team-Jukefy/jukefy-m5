openapi: 3.0.3
info:
  title: JUST EAT
  version: 1.0.0
paths:
  /api/menu/:
    get:
      operationId: menu_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - menu
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMenuList'
          description: ''
    post:
      operationId: menu_create
      tags:
      - menu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Menu'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
          description: ''
  /api/menu/{id}/:
    get:
      operationId: menu_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
          description: ''
    put:
      operationId: menu_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Menu'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
          description: ''
    patch:
      operationId: menu_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMenu'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMenu'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMenu'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
          description: ''
    delete:
      operationId: menu_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/orders/:
    get:
      operationId: orders_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - orders
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
  /api/tables/:
    get:
      operationId: tables_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - tables
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTableList'
          description: ''
    post:
      operationId: tables_create
      tags:
      - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Table'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Table'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
          description: ''
  /api/tables/{id}/:
    get:
      operationId: tables_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tables
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
          description: ''
    put:
      operationId: tables_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Table'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Table'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
          description: ''
    patch:
      operationId: tables_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTable'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTable'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTable'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
          description: ''
    delete:
      operationId: tables_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tables
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/tables/{id}/close/:
    put:
      operationId: tables_close_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableClose'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TableClose'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TableClose'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableClose'
          description: ''
    patch:
      operationId: tables_close_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTableClose'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTableClose'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTableClose'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableClose'
          description: ''
  /api/tables/{id}/orders/:
    get:
      operationId: tables_orders_list
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - tables
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: tables_orders_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/tables/{table_id}/orders/{id}:
    get:
      operationId: tables_orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: table_id
        schema:
          type: integer
        required: true
      tags:
      - tables
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: tables_orders_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: table_id
        schema:
          type: integer
        required: true
      tags:
      - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: tables_orders_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: table_id
        schema:
          type: integer
        required: true
      tags:
      - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: tables_orders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: table_id
        schema:
          type: integer
        required: true
      tags:
      - tables
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: users_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/login/:
    post:
      operationId: users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
components:
  schemas:
    CategoryEnum:
      enum:
      - drinks
      - foods
      - disserts
      type: string
    Menu:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        category:
          $ref: '#/components/schemas/CategoryEnum'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        description:
          type: string
          maxLength: 250
        user_id:
          type: integer
          readOnly: true
      required:
      - category
      - description
      - id
      - name
      - price
      - user_id
    Nested:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        category:
          $ref: '#/components/schemas/CategoryEnum'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        description:
          type: string
          maxLength: 250
        user:
          type: integer
      required:
      - category
      - description
      - id
      - name
      - price
      - user
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        quantity:
          type: integer
          maximum: 99
          minimum: 1
        total_item_price:
          type: number
          format: double
          readOnly: true
        payment:
          $ref: '#/components/schemas/PaymentEnum'
        item:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        item_id:
          type: integer
          writeOnly: true
      required:
      - id
      - item
      - item_id
      - quantity
      - total_item_price
    PaginatedMenuList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Menu'
    PaginatedOrderList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedTableList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Table'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedMenu:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        category:
          $ref: '#/components/schemas/CategoryEnum'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        description:
          type: string
          maxLength: 250
        user_id:
          type: integer
          readOnly: true
    PatchedOrder:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        quantity:
          type: integer
          maximum: 99
          minimum: 1
        total_item_price:
          type: number
          format: double
          readOnly: true
        payment:
          $ref: '#/components/schemas/PaymentEnum'
        item:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        item_id:
          type: integer
          writeOnly: true
    PatchedTable:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        table_number:
          type: integer
          maximum: 99
          minimum: 1
        status:
          $ref: '#/components/schemas/StatusEnum'
        musics_count:
          type: integer
          maximum: 2
          minimum: 0
    PatchedTableClose:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        table_number:
          type: integer
          maximum: 99
          minimum: 1
        status:
          $ref: '#/components/schemas/StatusEnum'
        musics_count:
          type: integer
          maximum: 2
          minimum: 0
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 127
        password:
          type: string
          writeOnly: true
          maxLength: 128
        contact:
          type: string
          maxLength: 20
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          maxLength: 50
        is_staff:
          type: boolean
          default: true
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
    PaymentEnum:
      enum:
      - pending
      - paid
      type: string
    StatusEnum:
      enum:
      - available
      - occupied
      type: string
    Table:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        table_number:
          type: integer
          maximum: 99
          minimum: 1
        status:
          $ref: '#/components/schemas/StatusEnum'
        musics_count:
          type: integer
          maximum: 2
          minimum: 0
      required:
      - id
      - table_number
    TableClose:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        table_number:
          type: integer
          maximum: 99
          minimum: 1
        status:
          $ref: '#/components/schemas/StatusEnum'
        musics_count:
          type: integer
          maximum: 2
          minimum: 0
      required:
      - id
      - table_number
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 127
        password:
          type: string
          writeOnly: true
          maxLength: 128
        contact:
          type: string
          maxLength: 20
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          maxLength: 50
        is_staff:
          type: boolean
          default: true
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
      required:
      - contact
      - email
      - id
      - is_superuser
      - name
      - password
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
